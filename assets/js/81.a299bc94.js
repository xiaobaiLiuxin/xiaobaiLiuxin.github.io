(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{632:function(v,_,t){"use strict";t.r(_);var a=t(17),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"入门概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#入门概述"}},[v._v("#")]),v._v(" 入门概述")]),v._v(" "),t("h3",{attrs:{id:"background"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#background"}},[v._v("#")]),v._v(" Background")]),v._v(" "),t("p",[t("img",{attrs:{src:"http://rdgmm6gnu.hn-bkt.clouddn.com/images/20211120170249.png",alt:"image-20211120152208044"}})]),v._v(" "),t("p",[t("img",{attrs:{src:"http://rdgmm6gnu.hn-bkt.clouddn.com/images/20211120170255.png",alt:"image-20211120152145890"}})]),v._v(" "),t("h3",{attrs:{id:"what"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#what"}},[v._v("#")]),v._v(" WHAT")]),v._v(" "),t("p",[v._v("NoSQL ( Not Only SQL ) ，泛指非关系型数据库。NoSQL 数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题，包括超大规模数据的存储。")]),v._v(" "),t("h3",{attrs:{id:"why"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#why"}},[v._v("#")]),v._v(" WHY")]),v._v(" "),t("p",[t("strong",[v._v("易扩展：")]),v._v(" 去掉了关系型数据库的关系型特性，数据之间无关系，易扩展。")]),v._v(" "),t("p",[t("strong",[v._v("大数据量高性能：")]),v._v(" 得益于 NoSQL 数据库的无关系性，数据库结构简单。NoSQL 的 Cache 是记录级的，是一种细粒度 Cache。")]),v._v(" "),t("p",[t("strong",[v._v("多样灵活的数据模型：")]),v._v(" NoSQL 无需事先为需要存储的数据建立字段，随时可以存储自定义的数据格式。")]),v._v(" "),t("p",[t("strong",[v._v("传统RDBMS VS NoSQL：")])]),v._v(" "),t("ol",[t("li",[t("strong",[v._v("RDBMS")])])]),v._v(" "),t("ul",[t("li",[v._v("高组织化的结构化数据")]),v._v(" "),t("li",[v._v("结构化查询语言（SQL）")]),v._v(" "),t("li",[v._v("数据和关系都存在单独的表中")]),v._v(" "),t("li",[v._v("数据库操作语言，数据定义语言")]),v._v(" "),t("li",[v._v("严格的一致性")]),v._v(" "),t("li",[v._v("基础事务")])]),v._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("strong",[v._v("NoSQL")])])]),v._v(" "),t("ul",[t("li",[v._v("没有声明性查询语句")]),v._v(" "),t("li",[v._v("没有预定义的模式")]),v._v(" "),t("li",[v._v("支持键 - 值对存储、列存储、文档存储，图形数据库")]),v._v(" "),t("li",[v._v("最终一致性，而非 ACID 属性")]),v._v(" "),t("li",[v._v("非结构化和不可预知的数据")]),v._v(" "),t("li",[v._v("CAP定理")]),v._v(" "),t("li",[v._v("高性能、高可用和可伸缩性")])]),v._v(" "),t("h3",{attrs:{id:"where"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#where"}},[v._v("#")]),v._v(" WHERE")]),v._v(" "),t("p",[v._v("Redis、Memcache、Mongdb")]),v._v(" "),t("h3",{attrs:{id:"how"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#how"}},[v._v("#")]),v._v(" HOW")]),v._v(" "),t("p",[v._v("KV、Cache、Persistence......")]),v._v(" "),t("h2",{attrs:{id:"_3v-3-高"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3v-3-高"}},[v._v("#")]),v._v(" 3V + 3 高")]),v._v(" "),t("p",[t("strong",[v._v("大数据时代的 3V：")]),v._v(" 海量 Volume、多样 Variety、实时 Velocity")]),v._v(" "),t("p",[t("strong",[v._v("互联网需求的 3 高：")]),v._v(" 高并发、高可扩、高性能")]),v._v(" "),t("h2",{attrs:{id:"当下nosql-的经典应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#当下nosql-的经典应用"}},[v._v("#")]),v._v(" 当下NoSQL 的经典应用")]),v._v(" "),t("p",[v._v("当下应用是 SQL 与 NoSQL 一起使用。以阿里巴巴中文站商品信息存放为例：")]),v._v(" "),t("ol",[t("li",[v._v("商品基本信息，如名称、价格、出厂日期等使用关系型数据库存储，目前淘宝在去 O 化，即拿掉 Oracle；")]),v._v(" "),t("li",[v._v("商品描述、详情（多文字信息）存放在文档数据库 MongDB 中；")]),v._v(" "),t("li",[v._v("商品图片，存放在风不是文件系统中；")]),v._v(" "),t("li",[v._v("商品关键字，淘宝内用搜索引擎 ISearch；")]),v._v(" "),t("li",[v._v("商品的波段性热点信息，存放在内存数据库中，如 Tair、Redis、Memcache；")]),v._v(" "),t("li",[v._v("商品交易、价格计算、积分累计等信息存放于外部系统。")])]),v._v(" "),t("p",[v._v("总结大型互联网应用（大数据、高并发、多样数据类型）的难点和解决方案。")]),v._v(" "),t("p",[v._v("难点：数据类型多样性、数据源的多样性和变化重构、数据源改造而数据服务平台不需要大面积重构。")]),v._v(" "),t("p",[v._v("解决方案：UDSL（统一数据服务平台）。UDSL 在网站应用集群和底层数据源之间，构建了一层代理，统一了数据层。")]),v._v(" "),t("h2",{attrs:{id:"nosql-数据模型简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nosql-数据模型简介"}},[v._v("#")]),v._v(" NoSQL 数据模型简介")]),v._v(" "),t("p",[t("strong",[v._v("以一个电商客户、订单、订购、地址模型来对比关系型数据库和非关系型数据库")])]),v._v(" "),t("p",[t("img",{attrs:{src:"http://rdgmm6gnu.hn-bkt.clouddn.com/images/20211120170239.png",alt:"image-20211120170239750"}})]),v._v(" "),t("p",[v._v("BSON 是一种类 JSON 的二进制形式的存储格式，简称 Binary JSON，和 JSON 一样，支持内嵌的文档对象和数组对象。")]),v._v(" "),t("p",[v._v("为什么上述情况可以使用聚合模型来处理？")]),v._v(" "),t("ul",[t("li",[v._v("高并发的操作是不太建议有关联查询的；")]),v._v(" "),t("li",[v._v("分布式事务是无法支持太多的并发。")])]),v._v(" "),t("h3",{attrs:{id:"聚合模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#聚合模型"}},[v._v("#")]),v._v(" 聚合模型")]),v._v(" "),t("p",[t("img",{attrs:{src:"http://rdgmm6gnu.hn-bkt.clouddn.com/images/20211120173056.png",alt:"image-20211120173056250"}})]),v._v(" "),t("h3",{attrs:{id:"nosql-数据库的四大分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nosql-数据库的四大分类"}},[v._v("#")]),v._v(" NoSQL 数据库的四大分类")]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("KV 键值数据库：")]),v._v(" 如 BerkeleyDB、Redis、Tair、Memcache......")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("BerkeleyDB：")]),v._v(" 如 CoucheDB、MongDB......")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("列存储数据库：")]),v._v(" 如 Cassandra、HBase")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("图关系数据库：")]),v._v(" 如 Neo4J、InfoGrid")])])]),v._v(" "),t("p",[t("strong",[v._v("四者对比：")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("分类")]),v._v(" "),t("th",[v._v("举例")]),v._v(" "),t("th",[v._v("典型应用场景")]),v._v(" "),t("th",[v._v("优点")]),v._v(" "),t("th",[v._v("缺点")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("键值数据库")]),v._v(" "),t("td",[v._v("Redis、Oracle BDB")]),v._v(" "),t("td",[v._v("内容缓存，用于处理大量数据的高访问负载，也用于一下日志系统")]),v._v(" "),t("td",[v._v("查询速度快")]),v._v(" "),t("td",[v._v("数据无结构化，通常只被当做字符串或二进制数据")])]),v._v(" "),t("tr",[t("td",[v._v("列存储数据库")]),v._v(" "),t("td",[v._v("HBase、Riak")]),v._v(" "),t("td",[v._v("分布式的文件系统")]),v._v(" "),t("td",[v._v("以列簇式存储，将同一列数据存在一起")]),v._v(" "),t("td",[v._v("功能相对局限")])]),v._v(" "),t("tr",[t("td",[v._v("文档型数据库")]),v._v(" "),t("td",[v._v("CouchDB、MongoDb")]),v._v(" "),t("td",[v._v("Web 应用（与Key-value类似，value 为结构化数据 ，不同的是数据库能够了解 value内容）")]),v._v(" "),t("td",[v._v("Key-value 对于的键值对，value 为结构化数据")]),v._v(" "),t("td",[v._v("查询性能不高，且缺乏统一的查询语法")])]),v._v(" "),t("tr",[t("td",[v._v("图形数据库")]),v._v(" "),t("td",[v._v("Neo4J、InfoGrid")]),v._v(" "),t("td",[v._v("社交网络，推荐系统等，专注于关系图谱")]),v._v(" "),t("td",[v._v("图结构")]),v._v(" "),t("td",[v._v("很多时候需要对整个图形计算才能得出信息，而且不太好做分布式的集群方案")])])])]),v._v(" "),t("h2",{attrs:{id:"分布式数据库中-cap-原理-base"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分布式数据库中-cap-原理-base"}},[v._v("#")]),v._v(" 分布式数据库中 CAP 原理+ BASE")]),v._v(" "),t("h3",{attrs:{id:"传统的-acid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传统的-acid"}},[v._v("#")]),v._v(" 传统的 ACID")]),v._v(" "),t("ul",[t("li",[v._v("A (Atomicity) 原子性：对于一个事务来说，不可能只执行其中一部分操作，这就是事务的原子性。")]),v._v(" "),t("li",[v._v("C (Consistency) 一致性：数据库总是从一个一致性的状态转换到另外一个一致性的状态。")]),v._v(" "),t("li",[v._v("I (Isolation) 独立性：通常来说（根据不同的隔离级别），一个事务所做的修改在最终提交以前，对其他事务是不可见的。")]),v._v(" "),t("li",[v._v("D (Durability) 持久性：一旦事务提交，则其所做的修改就会永久保存在数据库中。")])]),v._v(" "),t("h3",{attrs:{id:"cap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cap"}},[v._v("#")]),v._v(" CAP")]),v._v(" "),t("ul",[t("li",[v._v("C (Consistency) 持久性：在分布式系统中的所有数据备份，在同一时刻是否同样的值")]),v._v(" "),t("li",[v._v("A (Availablility) 可用性：保证每个请求不管成功或者失败都有响应。")]),v._v(" "),t("li",[v._v("P (Partition tolerance) 分区容错性：系统中任意信息的丢失或失败不会影响系统的继续运作。")])]),v._v(" "),t("h3",{attrs:{id:"cap-的-3-进-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cap-的-3-进-2"}},[v._v("#")]),v._v(" CAP 的 3 进 2")]),v._v(" "),t("p",[v._v("CAP 理论说的是在分布式系统中，最多只能实现上面两点。由于当前网络硬件肯定会出现延迟丢包问题，所以"),t("strong",[v._v("分区容忍性是必须实现的")]),v._v("。因此我们只能在"),t("strong",[v._v("一致性")]),v._v("和"),t("strong",[v._v("可用性")]),v._v("之间进行权衡。")]),v._v(" "),t("p",[t("strong",[v._v("一致性和可用性的抉择：")])]),v._v(" "),t("ul",[t("li",[v._v("数据库事务一致性需求；")]),v._v(" "),t("li",[v._v("数据库的写实性和读写实时性需求；")]),v._v(" "),t("li",[v._v("对于复杂的 SQL 查询的需求，特别是多表关联查询的需求。")])]),v._v(" "),t("p",[v._v("根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三大类：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。")])]),v._v(" "),t("li",[t("p",[v._v("CP - 满足一致性，分区容忍性的系统，通常性能不高。")])]),v._v(" "),t("li",[t("p",[v._v("AP - 满足可用性，分区容忍性的系统，通常一致性要求低一些。")])])]),v._v(" "),t("p",[t("img",{attrs:{src:"http://rdgmm6gnu.hn-bkt.clouddn.com/images/20211120185759.png",alt:"image-20211120185759530"}})]),v._v(" "),t("h3",{attrs:{id:"base"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#base"}},[v._v("#")]),v._v(" BASE")]),v._v(" "),t("p",[v._v("BASE 就是为了解决关系型数据库强一致性而引起可用性降低而提出的解决方案。BASE 其实是 Basically Available（基本可用）、Soft state（软状态）、Eventually consistent（最终一致）三个术语的缩写。其思想是通过让系统放松对某一时刻数据一致性的要求来换取系统整体伸缩性和性能上改观。")]),v._v(" "),t("h3",{attrs:{id:"分布式-集群简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分布式-集群简介"}},[v._v("#")]),v._v(" 分布式 +集群简介")]),v._v(" "),t("p",[t("strong",[v._v("分布式系统")]),v._v(" 由多台计算机和通信的软件组件通过计算机网络连接（本地网络或广域网）组成，是建立在网络之上的软件系统。")]),v._v(" "),t("p",[v._v("**分布式： **不同的多台服务器上面部署不同的服务模块（工程），他们之间通过 Rpc / Rmi 之间进行通信和调用，对外提供服务和组内协作。")]),v._v(" "),t("p",[t("strong",[v._v("集群：")]),v._v(" 不同服务器上面部署相同模块，通过分布式调度软件进行统一的调度，对外提供服务和访问。")]),v._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),t("p",[t("img",{attrs:{src:"http://rdgmm6gnu.hn-bkt.clouddn.com/images/20211121160913.png",alt:""}})])])}),[],!1,null,null,null);_.default=s.exports}}]);